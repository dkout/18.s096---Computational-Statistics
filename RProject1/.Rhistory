demo()
recursion
# Chunk 1
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
#   Display attributes of data frame
dim(diabetes)
head(diabetes)
tail(diabetes)
#   Use str() to display structure
str(diabetes)
# 2. Compute summary statistics ----
apply(diabetes,2,summary)
cbind(mean=apply(diabetes,2,mean),
sd=sqrt(apply(diabetes,2,var)))
round(cor(diabetes),digits=2)
# Chunk 2
par(mfcol=c(3,2))
names(diabetes)
#   Plot prog versus age, bmi
plot(prog ~ age, data=diabetes)
plot(prog ~ sex, data=diabetes)
plot(prog ~ bmi, data=diabetes)
plot(prog ~ map, data=diabetes)
plot(prog ~ tc, data=diabetes)
plot(prog ~ ldl, data=diabetes)
# Chunk 3
# 3.  Fit linear regression model ----
lmfit<-lm(prog ~ ., data=diabetes)
summary(lmfit)
# Chunk 4
# plot prog versus fitted values
# Refit model with helpful options in lm()
lmfit<-lm(prog ~ ., data=diabetes,x=TRUE,y=TRUE)
par(mfcol=c(1,1))
plot(x=lmfit$fitted.values,y=lmfit$y,
xlab="Fitted Values", ylab="prog")
cor(cbind(lmfit$fitted.values, lmfit$y))
# Chunk 5
# Rescale variables to have mean 0, sd 1
diabetes0=diabetes
names(diabetes0)
diabetes0=apply(diabetes,2,scale)
apply(diabetes0,2,summary)
apply(diabetes0,2,mean)
apply(diabetes0,2,var)
# Coerce matrix diabetes0 to be a data frame
# Replace the (scaled) prog variable with
#     the mean-adjusted original
diabetes0=data.frame(diabetes0)
diabetes0$prog=diabetes$prog - mean(diabetes$prog)
# Check that means are 0 and variances are apply(diabetes0,2,mean)
apply(diabetes0,2,mean)
apply(diabetes0,2,var)
# 3.1 Refit linear model with scaled indep vars ----
lmfit0=lm(prog~., data=diabetes0)
summary(lmfit0)
#   Note what statistics are same:
#       Residual standard error
#       Multiple R-squared
#       t values and p-values of indep vars
# Chunk 6
# 4.  Display coefficients (estimates and confidence intervals) ----
# Replace FALSE by TRUE if package coefplot needs to be installed
if (FALSE){install.packages(coefplot)}
library(coefplot)
coefplot(lmfit0)
# Chunk 7
# Re-do coefplot ordered by magnitude of coefficient
coefplot(lmfit0, sort='magnitude')
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
ls
clear
clr
clear()
clr()
setwd("C:/Users/dkout/OneDrive/MIT/Senior Spring/18.s096/RProject1")
setwd("C:/Users/dkout/OneDrive/MIT/Senior Spring/18.s096/RProject1")
clr()
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
# Chunk 1
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
#   Display attributes of data frame
dim(diabetes)
head(diabetes)
tail(diabetes)
#   Use str() to display structure
str(diabetes)
# 2. Compute summary statistics ----
apply(diabetes,2,summary)
cbind(mean=apply(diabetes,2,mean),
sd=sqrt(apply(diabetes,2,var)))
round(cor(diabetes),digits=2)
# Chunk 2
par(mfcol=c(3,2))
names(diabetes)
#   Plot prog versus age, bmi
plot(prog ~ age, data=diabetes)
plot(prog ~ sex, data=diabetes)
plot(prog ~ bmi, data=diabetes)
plot(prog ~ map, data=diabetes)
plot(prog ~ tc, data=diabetes)
plot(prog ~ ldl, data=diabetes)
# Chunk 3
# 3.  Fit linear regression model ----
lmfit<-lm(prog ~ ., data=diabetes)
summary(lmfit)
# Chunk 4
# plot prog versus fitted values
# Refit model with helpful options in lm()
lmfit<-lm(prog ~ ., data=diabetes,x=TRUE,y=TRUE)
par(mfcol=c(1,1))
plot(x=lmfit$fitted.values,y=lmfit$y,
xlab="Fitted Values", ylab="prog")
cor(cbind(lmfit$fitted.values, lmfit$y))
lmfit0=lm(prog~., data=diabetes0)
summary(lmfit0)
apply(diabetes0,2,mean)
apply(diabetes0,2,var)
# Chunk 1
# 1.  Read data into R ----
diabetes= read.csv(file="EfronData/diabetes.csv", sep=",", header=TRUE)
#   Display attributes of data frame
dim(diabetes)
head(diabetes)
tail(diabetes)
#   Use str() to display structure
str(diabetes)
# 2. Compute summary statistics ----
apply(diabetes,2,summary)
cbind(mean=apply(diabetes,2,mean),
sd=sqrt(apply(diabetes,2,var)))
round(cor(diabetes),digits=2)
# Chunk 2
par(mfcol=c(3,2))
names(diabetes)
#   Plot prog versus age, bmi
plot(prog ~ age, data=diabetes)
plot(prog ~ sex, data=diabetes)
plot(prog ~ bmi, data=diabetes)
plot(prog ~ map, data=diabetes)
plot(prog ~ tc, data=diabetes)
plot(prog ~ ldl, data=diabetes)
# Chunk 3
# 3.  Fit linear regression model ----
lmfit<-lm(prog ~ ., data=diabetes)
summary(lmfit)
# Chunk 4
# plot prog versus fitted values
# Refit model with helpful options in lm()
lmfit<-lm(prog ~ ., data=diabetes,x=TRUE,y=TRUE)
par(mfcol=c(1,1))
plot(x=lmfit$fitted.values,y=lmfit$y,
xlab="Fitted Values", ylab="prog")
cor(cbind(lmfit$fitted.values, lmfit$y))
if (FALSE){install.packages(coefplot)}
library(coefplot)
coefplot(lmfit0)
microbenchmarks
microbenchmark()
